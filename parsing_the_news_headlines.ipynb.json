{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 339,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                              headline countries  \\\n",
      "0                             Zika Outbreak Hits Miami       NaN   \n",
      "1                      Could Zika Reach New York City?       NaN   \n",
      "2                    First Case of Zika in Miami Beach       NaN   \n",
      "3              Mystery Virus Spreads in Recife, Brazil    Brazil   \n",
      "4              Dallas man comes down with case of Zika       NaN   \n",
      "..                                                 ...       ...   \n",
      "645  Rumors about Rabies spreading in Jerusalem hav...       NaN   \n",
      "646              More Zika patients reported in Indang       NaN   \n",
      "647  Suva authorities confirmed the spread of Rotav...       NaN   \n",
      "648         More Zika patients reported in Bella Vista       NaN   \n",
      "649                     Zika Outbreak in Wichita Falls       NaN   \n",
      "\n",
      "            cities  \n",
      "0            Miami  \n",
      "1    New York City  \n",
      "2      Miami Beach  \n",
      "3           Recife  \n",
      "4           Dallas  \n",
      "..             ...  \n",
      "645      Jerusalem  \n",
      "646         Indang  \n",
      "647           Suva  \n",
      "648    Bella Vista  \n",
      "649  Wichita Falls  \n",
      "\n",
      "[650 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "import geonamescache\n",
    "import unidecode\n",
    "\n",
    "\n",
    "gc = geonamescache.GeonamesCache()\n",
    "\n",
    "gc_cities = gc.get_cities()\n",
    "\n",
    "\n",
    "#all_cities = {'miami': {'12341234': {'country': 'US'},\n",
    "#                        '56234234': {'country': 'RU'}},\n",
    "#              'madison':{'981312' : {'Ccountry: 'US'}}}\n",
    "\n",
    "all_cities = {}\n",
    "for city_id in gc_cities:\n",
    "    city_name = gc_cities[city_id]['name']\n",
    "    unaccented_cityname = unidecode.unidecode(city_name)\n",
    "    if unaccented_cityname.lower() not in all_cities:\n",
    "        all_cities[unaccented_cityname.lower()] = {}\n",
    "    all_cities[unaccented_cityname.lower()][city_id] = {'country': gc_cities[city_id]['countrycode']}\n",
    "\n",
    "\n",
    "def extract_city(hl):\n",
    "    hllist = hl.split(' ')\n",
    "    cities = []\n",
    "    possible_city_names = []\n",
    "    \n",
    "    for i in range(len(hllist)-3):\n",
    "        possible_city_names.append(hllist[i] + ' ' + hllist[i+1] + ' ' + hllist[i+2]+ ' ' + hllist[i+3])\n",
    "    \n",
    "    for i in range(len(hllist)-2):\n",
    "        possible_city_names.append(hllist[i] + ' ' + hllist[i+1] + ' ' + hllist[i+2])\n",
    "        \n",
    "    for i in range(len(hllist)-1):\n",
    "        possible_city_names.append(hllist[i] + ' ' + hllist[i+1])    \n",
    "   \n",
    "    for i in range(len(hllist)):\n",
    "        possible_city_names.append(hllist[i])\n",
    "\n",
    "    \n",
    "    #print(possible_city_names)\n",
    "    for w in possible_city_names:\n",
    "        if w.lower() in all_cities and w.lower()!= 'of':\n",
    "                return w\n",
    "    return None\n",
    "\n",
    "    \n",
    "def extract_country(hl):\n",
    "    hllist = hl.split(' ')\n",
    "    possible_countries = []\n",
    "    \n",
    "    for i in range(len(hllist)):\n",
    "        possible_countries.append(hllist[i])\n",
    "        \n",
    "    for i in range(len(hllist)-1):\n",
    "        possible_countries.append(hllist[i] + ' ' + hllist[i+1])\n",
    "    \n",
    "    for i in range(len(hllist)-2):\n",
    "        possible_countries.append(hllist[i] + ' ' + hllist[i+1] + \" \" + hllist[i+2])\n",
    "\n",
    "    for c in possible_countries:\n",
    "        if c in gc.get_countries_by_names():\n",
    "                return c\n",
    "\n",
    "file = open(\"data/headlines.txt\", 'r')\n",
    "headlines = []\n",
    "data = []\n",
    "\n",
    "columns = ['headline', 'countries', 'cities']\n",
    "\n",
    "for line in file.readlines():\n",
    "    headlines.append(line.strip()) \n",
    "    regexspace = re.compile(r\"(\\'|\\’)\")\n",
    "    new = regexspace.sub(' ', line)\n",
    "    regexdelete = re.compile(r\"(,|\\?|\\!)\")\n",
    "    then = regexdelete.sub('', new)\n",
    "\n",
    "    city =  extract_city(then.strip())\n",
    "    country = extract_country(then.strip())\n",
    "    data.append([line.strip(), country, city])\n",
    "\n",
    "    \n",
    "    \n",
    "df = pd.DataFrame(data, columns = columns)\n",
    "\n",
    "df.fillna(value = pd.np.nan, inplace = True)\n",
    "\n",
    "print(df)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'4174738': {'country': 'US'}}"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_cities['tamarac']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gc.get_cities_by_name('los')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "panama>>>panama\n",
      "panama city>>>panama\n"
     ]
    }
   ],
   "source": [
    "cities = gc.get_cities()\n",
    "regexd = re.compile(r\"panama\", flags=re.IGNORECASE)\n",
    "\n",
    "\n",
    "for i in cities:\n",
    "    match = re.search(regexd, cities[i]['name']) \n",
    "    if match is not None:\n",
    "        print(cities[i]['name'] + '>>>'+ match.group(0))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-265-cd7e4ab87707>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-265-cd7e4ab87707>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    countries[]\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "countries = gc.get_countries_by_names()\n",
    "countries[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'geonameid': 3703443,\n",
       " 'name': 'Panamá',\n",
       " 'latitude': 8.9936,\n",
       " 'longitude': -79.51973,\n",
       " 'countrycode': 'PA',\n",
       " 'population': 408168,\n",
       " 'timezone': 'America/Panama',\n",
       " 'admin1code': '08'}"
      ]
     },
     "execution_count": 328,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gc_cities['3703443']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Panama City\n"
     ]
    }
   ],
   "source": [
    "cities = gc.get_cities()\n",
    "counter = 0\n",
    "\n",
    "regexp = re.compile(r'panama\\s?',flags=re.IGNORECASE)\n",
    "\n",
    "for idx in cities:\n",
    "    #print(name)\n",
    "    match = re.search(regexp, cities[idx]['name'])\n",
    "    if match is not None:\n",
    "        #for idx in all_cities[name]:\n",
    "            print(cities[idx]['name'])\n",
    "   \n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "panama city\n"
     ]
    }
   ],
   "source": [
    "word = 'Panama City'\n",
    "print(word.lower())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "yes\n"
     ]
    }
   ],
   "source": [
    "word = 'panama'\n",
    "st = 'panama city'\n",
    "\n",
    "if word in st:\n",
    "    print(\"yes\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
